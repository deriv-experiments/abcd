{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export type TestConfig = {\n  name: string;\n  variants: { [key: string]: number };\n};\n\nfunction ensureStyleAppended () {\n  const style = globalThis.document.createElement(\"style\");\n  style.textContent = `[ab-test-variant]:not([ab-test-variant=\"control\"]) { display: none; }`;\n  globalThis.document.head.appendChild(style);\n}\n\nexport default function init(config: TestConfig[]): void {\n  ensureStyleAppended();\n\n  for (const test of config) {\n    setupTest(test);\n  }\n\n  applyAbTests();\n\n  function setupTest(test: TestConfig): void {\n    const cookieName = `ab-${test.name}`;\n    let chosenVariant = getCookieValue(cookieName);\n\n    if (!chosenVariant) {\n      // Calculate the random number to choose a variant\n      const rand = Math.random();\n      let sum = 0;\n\n      // Iterate through the test's variants to find the chosen one\n      for (const variant in test.variants) {\n        sum += test.variants[variant];\n        if (rand <= sum) {\n          chosenVariant = variant;\n          break;\n        }\n      }\n\n      // Set a cookie for the chosen variant\n      globalThis.document.cookie = `${cookieName}=${chosenVariant}; path=/; max-age=2592000`; // Expires in 30 days\n    }\n  }\n\n  function applyAbTests(): void {\n    const testElements = document.querySelectorAll(\"[ab-test-name]\");\n\n    for (const element of testElements) {\n      const testName = element.getAttribute(\"ab-test-name\");\n      const testVariant = element.getAttribute(\"ab-test-variant\");\n\n      const chosenVariant = getCookieValue(`ab-${testName}`);\n      if (testVariant === chosenVariant) {\n        element.style.display = \"inherit\";\n      } else {\n        element.style.display = \"none\";\n      }\n    }\n  }\n\n  function getCookieValue(name: string): string | undefined {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n\n    if (parts.length === 2) {\n      return parts.pop().split(\";\").shift();\n    }\n  }\n}\n\nif (globalThis.document?.currentScript?.getAttribute(\"config\")) {\n  ensureStyleAppended();\n\n  const configPath = globalThis.document.currentScript.getAttribute(\"config\");\n\n  fetch(configPath)\n    .then((response) => response.json())\n    .then(init)\n    .catch((error) => console.error(\"Error loading A/B test configuration:\", error));\n}\n"],
  "mappings": "mBAKA,SAASA,GAAuB,CAC9B,IAAMC,EAAQ,WAAW,SAAS,cAAc,OAAO,EACvDA,EAAM,YAAc,wEACpB,WAAW,SAAS,KAAK,YAAYA,CAAK,CAC5C,CAEe,SAARC,EAAsBC,EAA4B,CACvDH,EAAoB,EAEpB,QAAWI,KAAQD,EACjBE,EAAUD,CAAI,EAGhBE,EAAa,EAEb,SAASD,EAAUD,EAAwB,CACzC,IAAMG,EAAa,MAAMH,EAAK,OAC1BI,EAAgBC,EAAeF,CAAU,EAE7C,GAAI,CAACC,EAAe,CAElB,IAAME,EAAO,KAAK,OAAO,EACrBC,EAAM,EAGV,QAAWC,KAAWR,EAAK,SAEzB,GADAO,GAAOP,EAAK,SAASQ,CAAO,EACxBF,GAAQC,EAAK,CACfH,EAAgBI,EAChB,MAKJ,WAAW,SAAS,OAAS,GAAGL,KAAcC,6BAElD,CAEA,SAASF,GAAqB,CAC5B,IAAMO,EAAe,SAAS,iBAAiB,gBAAgB,EAE/D,QAAWC,KAAWD,EAAc,CAClC,IAAME,EAAWD,EAAQ,aAAa,cAAc,EAC9CE,EAAcF,EAAQ,aAAa,iBAAiB,EAEpDN,EAAgBC,EAAe,MAAMM,GAAU,EACjDC,IAAgBR,EAClBM,EAAQ,MAAM,QAAU,UAExBA,EAAQ,MAAM,QAAU,OAG9B,CAEA,SAASL,EAAeQ,EAAkC,CAExD,IAAMC,EADQ,KAAK,SAAS,SACR,MAAM,KAAKD,IAAO,EAEtC,GAAIC,EAAM,SAAW,EACnB,OAAOA,EAAM,IAAI,EAAE,MAAM,GAAG,EAAE,MAAM,CAExC,CACF,CAnEA,IAAAC,EAAAC,EAqEA,IAAIA,GAAAD,EAAA,WAAW,WAAX,YAAAA,EAAqB,gBAArB,MAAAC,EAAoC,aAAa,UAAW,CAC9DpB,EAAoB,EAEpB,IAAMqB,EAAa,WAAW,SAAS,cAAc,aAAa,QAAQ,EAE1E,MAAMA,CAAU,EACb,KAAMC,GAAaA,EAAS,KAAK,CAAC,EAClC,KAAKpB,CAAI,EACT,MAAOqB,GAAU,QAAQ,MAAM,wCAAyCA,CAAK,CAAC",
  "names": ["ensureStyleAppended", "style", "init", "config", "test", "setupTest", "applyAbTests", "cookieName", "chosenVariant", "getCookieValue", "rand", "sum", "variant", "testElements", "element", "testName", "testVariant", "name", "parts", "_a", "_b", "configPath", "response", "error"]
}
