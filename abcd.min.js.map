{
  "version": 3,
  "sources": ["../src/getCookieValue.ts", "../src/index.ts"],
  "sourcesContent": ["export default function getCookieValue(name: string): string | undefined {\n  if (!name || typeof name !== \"string\") {\n    throw new Error(\"Invalid cookie name provided\");\n  }\n\n  const namePattern = /^[^;=\\s]+$/;\n  if (!namePattern.test(name)) {\n    throw new Error(\"Invalid characters in cookie name\");\n  }\n\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n\n  if (parts.length === 2) {\n    const decodedValue = decodeURIComponent(parts.pop()?.split(\";\").shift() || \"\");\n    if (decodedValue) {\n      return decodedValue;\n    } else {\n      throw new Error(\"Error decoding cookie value\");\n    }\n  }\n}\n", "import getCookieValue from './getCookieValue.ts';\n\nexport type TestConfig = {\n  name: string;\n  variants: { [key: string]: number };\n};\n\nfunction ensureStyleAppended() {\n  if (document.getElementById(\"abTestStyles\")) {\n    return;\n  }\n\n  const style = globalThis.document.createElement(\"style\");\n  style.id = \"abTestStyles\";\n  globalThis.document.head.appendChild(style);\n\n  insertCssRule('[ab-test-variant]:not([ab-test-variant=\"control\"]) { display: none; }');\n}\n\nfunction insertCssRule(rule: string) {\n  const stylesheet = document.getElementById(\"abTestStyles\") as HTMLStyleElement;\n  const sheet = stylesheet.sheet as CSSStyleSheet;\n  sheet.insertRule(rule, sheet.cssRules.length);\n}\n\nexport default function init(config: TestConfig[]): void {\n  ensureStyleAppended();\n\n  for (const test of config) {\n    setupTest(test);\n  }\n\n  function setupTest(test: TestConfig): void {\n    const cookieName = `ab-${test.name}`;\n    let chosenVariant = getCookieValue(cookieName);\n\n    if (!chosenVariant) {\n      // Calculate the random number to choose a variant\n      const rand = Math.random();\n      let sum = 0;\n\n      // Iterate through the test's variants to find the chosen one\n      for (const variant in test.variants) {\n        sum += test.variants[variant];\n        if (rand <= sum) {\n          chosenVariant = variant;\n          break;\n        }\n      }\n\n      // Set a cookie for the chosen variant\n      globalThis.document.cookie = `${cookieName}=${chosenVariant}; path=/; max-age=2592000`; // Expires in 30 days\n    }\n\n    // Insert CSS rules for the test\n    for (const variant in test.variants) {\n      const rule = `[ab-test-name=\"${test.name}\"][ab-test-variant=\"${variant}\"] { display: ${variant === chosenVariant ? \"inherit\" : \"none\"}; }`;\n      insertCssRule(rule);\n    }\n  }\n}\n\nconst configPath = globalThis.document?.currentScript?.getAttribute(\"config\");\nif (configPath) {\n  ensureStyleAppended();\n\n  fetch(configPath)\n    .then((response) => response.json())\n    .then(init)\n    .catch((error) => console.error(\"Error loading A/B test configuration:\", error));\n}\n"],
  "mappings": "mBAAe,SAARA,EAAgCC,EAAkC,CAAzE,IAAAC,EACE,GAAI,CAACD,GAAQ,OAAOA,GAAS,SAC3B,MAAM,IAAI,MAAM,8BAA8B,EAIhD,GAAI,CADgB,aACH,KAAKA,CAAI,EACxB,MAAM,IAAI,MAAM,mCAAmC,EAIrD,IAAME,EADQ,KAAK,SAAS,SACR,MAAM,KAAKF,IAAO,EAEtC,GAAIE,EAAM,SAAW,EAAG,CACtB,IAAMC,EAAe,qBAAmBF,EAAAC,EAAM,IAAI,IAAV,YAAAD,EAAa,MAAM,KAAK,UAAW,EAAE,EAC7E,GAAIE,EACF,OAAOA,EAEP,MAAM,IAAI,MAAM,6BAA6B,EAGnD,CCdA,SAASC,GAAsB,CAC7B,GAAI,SAAS,eAAe,cAAc,EACxC,OAGF,IAAMC,EAAQ,WAAW,SAAS,cAAc,OAAO,EACvDA,EAAM,GAAK,eACX,WAAW,SAAS,KAAK,YAAYA,CAAK,EAE1CC,EAAc,uEAAuE,CACvF,CAEA,SAASA,EAAcC,EAAc,CAEnC,IAAMC,EADa,SAAS,eAAe,cAAc,EAChC,MACzBA,EAAM,WAAWD,EAAMC,EAAM,SAAS,MAAM,CAC9C,CAEe,SAARC,EAAsBC,EAA4B,CACvDN,EAAoB,EAEpB,QAAWO,KAAQD,EACjBE,EAAUD,CAAI,EAGhB,SAASC,EAAUD,EAAwB,CACzC,IAAME,EAAa,MAAMF,EAAK,OAC1BG,EAAgBC,EAAeF,CAAU,EAE7C,GAAI,CAACC,EAAe,CAElB,IAAME,EAAO,KAAK,OAAO,EACrBC,EAAM,EAGV,QAAWC,KAAWP,EAAK,SAEzB,GADAM,GAAON,EAAK,SAASO,CAAO,EACxBF,GAAQC,EAAK,CACfH,EAAgBI,EAChB,MAKJ,WAAW,SAAS,OAAS,GAAGL,KAAcC,6BAIhD,QAAWI,KAAWP,EAAK,SAAU,CACnC,IAAMJ,EAAO,kBAAkBI,EAAK,2BAA2BO,kBAAwBA,IAAYJ,EAAgB,UAAY,YAC/HR,EAAcC,CAAI,EAEtB,CACF,CA5DA,IAAAY,EAAAC,EA8DMC,GAAaD,GAAAD,EAAA,WAAW,WAAX,YAAAA,EAAqB,gBAArB,YAAAC,EAAoC,aAAa,UAChEC,IACFjB,EAAoB,EAEpB,MAAMiB,CAAU,EACb,KAAMC,GAAaA,EAAS,KAAK,CAAC,EAClC,KAAKb,CAAI,EACT,MAAOc,GAAU,QAAQ,MAAM,wCAAyCA,CAAK,CAAC",
  "names": ["getCookieValue", "name", "_a", "parts", "decodedValue", "ensureStyleAppended", "style", "insertCssRule", "rule", "sheet", "init", "config", "test", "setupTest", "cookieName", "chosenVariant", "getCookieValue", "rand", "sum", "variant", "_a", "_b", "configPath", "response", "error"]
}
