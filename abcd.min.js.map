{
  "version": 3,
  "sources": ["../src/getCookieValue.ts", "../src/index.ts"],
  "sourcesContent": ["export default function getCookieValue (name: string): string | undefined {\n  if (!name || typeof name !== 'string') {\n    throw new Error('Invalid cookie name provided');\n  }\n\n  const namePattern = /^[^;=\\s]+$/;\n  if (!namePattern.test(name)) {\n    throw new Error('Invalid characters in cookie name');\n  }\n\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n\n  if (parts.length === 2) {\n    const decodedValue = decodeURIComponent(parts.pop()?.split(';').shift() ?? '');\n    if (decodedValue) {\n      return decodedValue;\n    } else {\n      throw new Error('Error decoding cookie value');\n    }\n  }\n}\n", "import getCookieValue from './getCookieValue.ts';\n\nexport interface TestConfig {\n  name: string\n  variants: Record<string, number>\n}\n\nexport let abTests: Record<string, string | number> = {};\n(globalThis as any).abTests = abTests;\n\n// Tests expire in 30 days\nconst TEST_EXPIRE_TIME = (60 * 60 * 24) * 30;\n\nfunction ensureStyleAppended (): void {\n  if (document.getElementById('abTestStyles') != null) {\n    return;\n  }\n\n  const style = globalThis.document.createElement('style');\n  style.id = 'abTestStyles';\n  globalThis.document.head.appendChild(style);\n\n  insertCssRule('[ab-test-variant]:not([ab-test-variant=\"control\"]) { display: none; }');\n}\n\nfunction insertCssRule (rule: string): void {\n  const stylesheet = document.getElementById('abTestStyles') as HTMLStyleElement;\n  const sheet = stylesheet.sheet as CSSStyleSheet;\n  sheet.insertRule(rule, sheet.cssRules.length);\n}\n\nexport default function init (config: TestConfig[]): Record<string, string | number> {\n  ensureStyleAppended();\n  abTests = {};\n\n  for (const test of config) {\n    setupTest(test);\n  }\n\n  function setupTest (test: TestConfig): void {\n    const cookieName = `ab-${test.name}`;\n    let chosenVariant = getCookieValue(cookieName);\n\n    if (chosenVariant && !test.variants[chosenVariant]) {\n      chosenVariant = undefined;\n    }\n\n    abTests[test.name] = chosenVariant ?? 'control';\n\n    if (!chosenVariant) {\n      const rand = Math.random();\n      let cumulativeProbability = 0;\n      chosenVariant = 'control';\n      for (const variant in test.variants) {\n        cumulativeProbability += test.variants[variant];\n        if (rand <= cumulativeProbability) {\n          chosenVariant = variant;\n          break;\n        }\n      }\n\n      globalThis.document.cookie = `${cookieName}=${chosenVariant}; path=/; max-age=${TEST_EXPIRE_TIME}`;\n    }\n\n    for (const variant in test.variants) {\n      const rule = `[ab-test-name=\"${test.name}\"][ab-test-variant=\"${variant}\"] { display: ${variant === chosenVariant ? 'inherit' : 'none'}; }`;\n      insertCssRule(rule);\n    }\n  }\n\n  (globalThis as any).abTests = abTests;\n  return abTests;\n}\n\nconst configPath = globalThis.document?.currentScript?.getAttribute('config');\n\nif (configPath) {\n  ensureStyleAppended();\n\n  fetch(configPath)\n    .then(async (response) => await response.json())\n    .then(init)\n    .catch((error) => { console.error('Error loading A/B test configuration:', error); });\n}\n"],
  "mappings": "mBAAe,SAARA,EAAiCC,EAAkC,CAA1E,IAAAC,EAAAC,EACE,GAAI,CAACF,GAAQ,OAAOA,GAAS,SAC3B,MAAM,IAAI,MAAM,8BAA8B,EAIhD,GAAI,CADgB,aACH,KAAKA,CAAI,EACxB,MAAM,IAAI,MAAM,mCAAmC,EAIrD,IAAMG,EADQ,KAAK,SAAS,SACR,MAAM,KAAKH,IAAO,EAEtC,GAAIG,EAAM,SAAW,EAAG,CACtB,IAAMC,EAAe,oBAAmBF,GAAAD,EAAAE,EAAM,IAAI,IAAV,YAAAF,EAAa,MAAM,KAAK,UAAxB,KAAAC,EAAmC,EAAE,EAC7E,GAAIE,EACF,OAAOA,EAEP,MAAM,IAAI,MAAM,6BAA6B,EAGnD,CCdO,IAAIC,EAA2C,CAAC,EACtD,WAAmB,QAAUA,EAG9B,IAAMC,EAAoB,GAAK,GAAK,GAAM,GAE1C,SAASC,GAA6B,CACpC,GAAI,SAAS,eAAe,cAAc,GAAK,KAC7C,OAGF,IAAMC,EAAQ,WAAW,SAAS,cAAc,OAAO,EACvDA,EAAM,GAAK,eACX,WAAW,SAAS,KAAK,YAAYA,CAAK,EAE1CC,EAAc,uEAAuE,CACvF,CAEA,SAASA,EAAeC,EAAoB,CAE1C,IAAMC,EADa,SAAS,eAAe,cAAc,EAChC,MACzBA,EAAM,WAAWD,EAAMC,EAAM,SAAS,MAAM,CAC9C,CAEe,SAARC,EAAuBC,EAAuD,CACnFN,EAAoB,EACpBF,EAAU,CAAC,EAEX,QAAWS,KAAQD,EACjBE,EAAUD,CAAI,EAGhB,SAASC,EAAWD,EAAwB,CAC1C,IAAME,EAAa,MAAMF,EAAK,OAC1BG,EAAgBC,EAAeF,CAAU,EAQ7C,GANIC,GAAiB,CAACH,EAAK,SAASG,CAAa,IAC/CA,EAAgB,QAGlBZ,EAAQS,EAAK,IAAI,EAAIG,GAAA,KAAAA,EAAiB,UAElC,CAACA,EAAe,CAClB,IAAME,EAAO,KAAK,OAAO,EACrBC,EAAwB,EAC5BH,EAAgB,UAChB,QAAWI,KAAWP,EAAK,SAEzB,GADAM,GAAyBN,EAAK,SAASO,CAAO,EAC1CF,GAAQC,EAAuB,CACjCH,EAAgBI,EAChB,MAIJ,WAAW,SAAS,OAAS,GAAGL,KAAcC,sBAAkCX,IAGlF,QAAWe,KAAWP,EAAK,SAAU,CACnC,IAAMJ,EAAO,kBAAkBI,EAAK,2BAA2BO,kBAAwBA,IAAYJ,EAAgB,UAAY,YAC/HR,EAAcC,CAAI,EAEtB,CAEA,OAAC,WAAmB,QAAUL,EACvBA,CACT,CAxEA,IAAAiB,EAAAC,EA0EMC,GAAaD,GAAAD,EAAA,WAAW,WAAX,YAAAA,EAAqB,gBAArB,YAAAC,EAAoC,aAAa,UAEhEC,IACFjB,EAAoB,EAEpB,MAAMiB,CAAU,EACb,KAAK,MAAOC,GAAa,MAAMA,EAAS,KAAK,CAAC,EAC9C,KAAKb,CAAI,EACT,MAAOc,GAAU,CAAE,QAAQ,MAAM,wCAAyCA,CAAK,CAAG,CAAC",
  "names": ["getCookieValue", "name", "_a", "_b", "parts", "decodedValue", "abTests", "TEST_EXPIRE_TIME", "ensureStyleAppended", "style", "insertCssRule", "rule", "sheet", "init", "config", "test", "setupTest", "cookieName", "chosenVariant", "getCookieValue", "rand", "cumulativeProbability", "variant", "_a", "_b", "configPath", "response", "error"]
}
