{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export type TestConfig = {\n  name: string;\n  variants: { [key: string]: number };\n};\n\nfunction ensureStyleAppended () {\n  const style = globalThis.document.createElement(\"style\");\n  style.textContent = `[ab-test-variant]:not([ab-test-variant=\"control\"]) { display: none; }`;\n  globalThis.document.head.appendChild(style);\n}\n\nexport default function init(config: TestConfig[]): void {\n  ensureStyleAppended();\n\n  for (const test of config) {\n    setupTest(test);\n  }\n\n  applyAbTests();\n\n  function setupTest(test: TestConfig): void {\n    const cookieName = `ab-${test.name}`;\n    let chosenVariant = getCookieValue(cookieName);\n\n    if (!chosenVariant) {\n      // Calculate the random number to choose a variant\n      const rand = Math.random();\n      let sum = 0;\n\n      // Iterate through the test's variants to find the chosen one\n      for (const variant in test.variants) {\n        sum += test.variants[variant];\n        if (rand <= sum) {\n          chosenVariant = variant;\n          break;\n        }\n      }\n\n      // Set a cookie for the chosen variant\n      globalThis.document.cookie = `${cookieName}=${chosenVariant}; path=/; max-age=2592000`; // Expires in 30 days\n    }\n  }\n\n  function applyAbTests(): void {\n    const testElements = document.querySelectorAll<HTMLElement>(\"[ab-test-name]\");\n\n    for (const element of testElements) {\n      const testName = element.getAttribute(\"ab-test-name\");\n      const testVariant = element.getAttribute(\"ab-test-variant\");\n\n      const chosenVariant = getCookieValue(`ab-${testName}`);\n      if (testVariant === chosenVariant) {\n        element.style.display = \"inherit\";\n      } else {\n        element.style.display = \"none\";\n      }\n    }\n  }\n\n  function getCookieValue(name: string): string | undefined {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n\n    if (parts.length === 2) {\n      return parts.pop()?.split(\";\").shift();\n    }\n  }\n}\n\nconst configPath = globalThis.document?.currentScript?.getAttribute(\"config\")\nif (configPath) {\n  ensureStyleAppended();\n\n  fetch(configPath)\n    .then((response) => response.json())\n    .then(init)\n    .catch((error) => console.error(\"Error loading A/B test configuration:\", error));\n}\n"],
  "mappings": ";AAKA,SAAS,sBAAuB;AAC9B,QAAM,QAAQ,WAAW,SAAS,cAAc,OAAO;AACvD,QAAM,cAAc;AACpB,aAAW,SAAS,KAAK,YAAY,KAAK;AAC5C;AAEe,SAAR,KAAsB,QAA4B;AACvD,sBAAoB;AAEpB,aAAW,QAAQ,QAAQ;AACzB,cAAU,IAAI;AAAA,EAChB;AAEA,eAAa;AAEb,WAAS,UAAU,MAAwB;AACzC,UAAM,aAAa,MAAM,KAAK;AAC9B,QAAI,gBAAgB,eAAe,UAAU;AAE7C,QAAI,CAAC,eAAe;AAElB,YAAM,OAAO,KAAK,OAAO;AACzB,UAAI,MAAM;AAGV,iBAAW,WAAW,KAAK,UAAU;AACnC,eAAO,KAAK,SAAS,OAAO;AAC5B,YAAI,QAAQ,KAAK;AACf,0BAAgB;AAChB;AAAA,QACF;AAAA,MACF;AAGA,iBAAW,SAAS,SAAS,GAAG,cAAc;AAAA,IAChD;AAAA,EACF;AAEA,WAAS,eAAqB;AAC5B,UAAM,eAAe,SAAS,iBAA8B,gBAAgB;AAE5E,eAAW,WAAW,cAAc;AAClC,YAAM,WAAW,QAAQ,aAAa,cAAc;AACpD,YAAM,cAAc,QAAQ,aAAa,iBAAiB;AAE1D,YAAM,gBAAgB,eAAe,MAAM,UAAU;AACrD,UAAI,gBAAgB,eAAe;AACjC,gBAAQ,MAAM,UAAU;AAAA,MAC1B,OAAO;AACL,gBAAQ,MAAM,UAAU;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAEA,WAAS,eAAe,MAAkC;AACxD,UAAM,QAAQ,KAAK,SAAS;AAC5B,UAAM,QAAQ,MAAM,MAAM,KAAK,OAAO;AAEtC,QAAI,MAAM,WAAW,GAAG;AACtB,aAAO,MAAM,IAAI,GAAG,MAAM,GAAG,EAAE,MAAM;AAAA,IACvC;AAAA,EACF;AACF;AAEA,IAAM,aAAa,WAAW,UAAU,eAAe,aAAa,QAAQ;AAC5E,IAAI,YAAY;AACd,sBAAoB;AAEpB,QAAM,UAAU,EACb,KAAK,CAAC,aAAa,SAAS,KAAK,CAAC,EAClC,KAAK,IAAI,EACT,MAAM,CAAC,UAAU,QAAQ,MAAM,yCAAyC,KAAK,CAAC;AACnF;",
  "names": []
}
